name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm test -- --coverage --verbose
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run integration tests
      run: npm test -- --testPathPattern="integration|animation-pipeline|responsive-behavior" --verbose
      
    - name: Run dynamic text update tests
      run: npm test -- --testPathPattern="dynamic-text-update" --verbose

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm test -- --testPathPattern="performance" --verbose --maxWorkers=1
      env:
        NODE_OPTIONS: --expose-gc

  browser-compatibility-tests:
    name: Browser Compatibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run browser compatibility tests
      run: npm test -- --testPathPattern="browser-compatibility" --verbose

  error-handling-tests:
    name: Error Handling Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run error handling tests
      run: npm test -- --testPathPattern="error-handling" --verbose

  resource-cleanup-tests:
    name: Resource Cleanup Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run resource cleanup tests
      run: npm test -- --testPathPattern="resource-cleanup" --verbose
      env:
        NODE_OPTIONS: --expose-gc

  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run core tests
      run: npm test -- --testPathPattern="main-class|ConfigManager|CanvasManager|NoiseGenerator|TextRenderer|AnimationController" --verbose

  build-and-test:
    name: Build and Test Distribution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build library
      run: npm run build
      
    - name: Test built files exist
      run: |
        test -f dist/nosnap.cjs.js
        test -f dist/nosnap.esm.js
        test -f dist/nosnap.umd.js
        test -f dist/nosnap.umd.min.js
        test -f dist/nosnap.d.ts
        
    - name: Test file sizes
      run: |
        echo "Checking bundle sizes..."
        ls -la dist/
        
    - name: Run tests against built library
      run: npm test -- --verbose

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      continue-on-error: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, browser-compatibility-tests, error-handling-tests, resource-cleanup-tests, cross-platform-tests, build-and-test]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Browser Compatibility | ${{ needs.browser-compatibility-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Error Handling | ${{ needs.error-handling-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Resource Cleanup | ${{ needs.resource-cleanup-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cross-Platform | ${{ needs.cross-platform-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build and Test | ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
        
    - name: Check if all tests passed
      if: needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.performance-tests.result == 'success' && needs.browser-compatibility-tests.result == 'success' && needs.error-handling-tests.result == 'success' && needs.resource-cleanup-tests.result == 'success' && needs.cross-platform-tests.result == 'success' && needs.build-and-test.result == 'success'
      run: |
        echo "✅ All test suites passed successfully!" >> $GITHUB_STEP_SUMMARY
        
    - name: Check if any tests failed
      if: needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.performance-tests.result == 'failure' || needs.browser-compatibility-tests.result == 'failure' || needs.error-handling-tests.result == 'failure' || needs.resource-cleanup-tests.result == 'failure' || needs.cross-platform-tests.result == 'failure' || needs.build-and-test.result == 'failure'
      run: |
        echo "❌ Some test suites failed. Please check the individual job results." >> $GITHUB_STEP_SUMMARY
        exit 1